diff -r Ising-Model/src/mc.cpp Boltzmann-Machine_test/src/mc.cpp
66c66
<         seq[i] = (int)gsl_rng_uniform_int(rg, (unsigned long int)model.q+1);
---
>         seq[i] = (int)gsl_rng_uniform_int(rg, (unsigned long int)model.q);
184,187c184,185
< 		      if (seq[i]==1){
< 		        model.mom1(i,0)++;
< 		        mom1_temp[block_cnt](i,0)++;
< 		      }
---
> 		      model.mom1(i,my_seq[i])++;
> 		      mom1_temp[block_cnt](i,my_seq[i])++;
192,202c190,198
< 			      if (seq[i]==1&&seq[j]==1){
< 			        model.mom2(0,0,index)++;
< 			        mom2_temp[block_cnt](0,0,index)++;
< 			      	if(model.symmetrize_on){
< 				      	if(my_seq[i]!=my_seq[j]){
< 			              	model.mom2(0,0,index) += 0.5;
< 			              	mom2_temp[block_cnt](0,0,index) += 0.5;
< 			              	model.mom2(0,0,index) -= 0.5;
< 			              	mom2_temp[block_cnt](0,0,index) -= 0.5;
< 				      	}
< 			        }
---
> 			      model.mom2(my_seq[i],my_seq[j],index)++;
> 			      mom2_temp[block_cnt](my_seq[i],my_seq[j],index)++;
> 			      if(model.symmetrize_on){
> 				      if(my_seq[i]!=my_seq[j]){
> 					      model.mom2(my_seq[j],my_seq[i],index) += 0.5;
> 					      mom2_temp[block_cnt](my_seq[j],my_seq[i],index) += 0.5;
> 					      model.mom2(my_seq[i],my_seq[j],index) -= 0.5;
> 					      mom2_temp[block_cnt](my_seq[i],my_seq[j],index) -= 0.5;
> 				      }
241,242c237,238
<     unsigned long int r = gsl_rng_uniform_int(rng, (unsigned long int)model.q+1);
<     while((int)r==seq[s]) r = gsl_rng_uniform_int(rng, (unsigned long int)model.q+1);
---
>     unsigned long int r = gsl_rng_uniform_int(rng, (unsigned long int)model.q);
>     while((int)r==seq[s]) r = gsl_rng_uniform_int(rng, (unsigned long int)model.q);
diff -r Ising-Model/src/model.cpp Boltzmann-Machine_test/src/model.cpp
40,42c40
<     if (seq[i] == 1){
<       energy -= h(i,0);
<     }
---
>     energy -= h(i,seq[i]);
47,49c45,46
<       if(seq[i]==1&&seq[j]==1){
<        energy -= J(0, 0, index);
<       }
---
>       if(symmetrize_on) energy -= (J(seq[i], seq[j], index) + J(seq[j], seq[i], index))/2;
>       else energy -= J(seq[i], seq[j], index);
51a49
> 
59,63c57
<   if (r == 1){
<     dE -= h(m,0);
<   } else {
<     dE += h(m,0);
<   }
---
>   dE -= h(m,r) - h(m,seq[m]);
67,70c61,66
<       if(r == 1&&seq[i]==1){ 
< 	      dE -= J(0,0, index);
<       } else if (r==0&&seq[i]==1) {
< 	      dE += J(0,0, index);
---
>       if(symmetrize_on) {
> 	      dE -= (J(seq[i], r, index) + J(r, seq[i], index))/2;
> 	      dE += (J(seq[i], seq[m], index) + J(seq[m], seq[i], index))/2;
>       } else { 
> 	      dE -= J(seq[i], r, index);
> 	      dE += J(seq[i], seq[m], index);
76,79c72,77
<       if(r == 1&&seq[j]==1){ 
< 	      dE -= J(0,0, index);
<       } else if (r==0&&seq[j]==1){
< 	      dE += J(0,0, index);
---
>       if(symmetrize_on) {
> 	      dE -= (J(r, seq[j], index) + J(seq[j], r, index))/2;
> 	      dE += (J(seq[m], seq[j], index) + J(seq[j], seq[m], index))/2;
>       } else {
> 	      dE -= J(r, seq[j], index);
> 	      dE += J(seq[m], seq[j], index);
145c143
<     while(seq[p]==q) p--;
---
>     while(seq[p]==q-1) p--;
151a150,206
> }
> 
> void model::convert_to_zero_sum(){
> 
>   std::cout << "Converting to zero sum gauge..." << std::endl;
>   
>   for(int i=0; i<N; i++){
>     double sum=0;
>     for(int a=0; a<q; a++) sum += h(i,a);
>     for(int a=0; a<q; a++) h(i,a) -= sum/q;
>     for(int a=0; a<q; a++){
>       for(int q1=0; q1<q; q1++){
>         for(int j=0; j<N; j++){
>           if(j!=i){
>             if(j>i){
>               int index = (N-1)*i-i*(i+1)/2+j-1;
>               h(i,a) += J(a,q1,index)/q;
>               for(int q2=0; q2<q; q2++){
>                 h(i,a) -= J(q1,q2,index)/(q*q);
>               }
>             }
>             else{
>               int index = (N-1)*j-j*(j+1)/2+i-1;
>               h(i,a) += J(q1,a,index)/q;
>               for(int q2=0; q2<q; q2++){
>                 h(i,a) -= J(q1,q2,index)/(q*q);
>               }
>             }
>           }
>         }
>       }
>     }
>   }
>   for(int i=0; i<N-1; i++){
>     for(int j=i+1; j<N; j++){
>       int index = (N-1)*i-i*(i+1)/2+j-1;
>       double dsum1=0;
>       std::vector<double> sum1_a(q);
>       std::vector<double> sum1_b(q);
>       for(int a=0; a<q; a++){
>         sum1_a[a]=0;
>         sum1_b[a]=0;
>       }
>       for(int b=0; b<q; b++){
>         for(int a=0; a<q; a++){
>           sum1_b[b] += J(a,b,index)/q;
>           dsum1 += J(a,b,index)/(q*q);
>           sum1_a[a] += J(a,b,index)/q;
>         }
>       }
>       for(int a=0; a<q; a++){
>         for(int b=0; b<q; b++){
>           J(a,b,index) = J(a,b,index) - sum1_a[a] - sum1_b[b] + dsum1;
>         }
>       }
>     }
>   }
diff -r Ising-Model/src/msa.cpp Boltzmann-Machine_test/src/msa.cpp
85,88d84
<   else if(q==1){
<     if(a==0) s='H';
<     else s='P';
<   }
102c98
<   else if(extension=="dat") *q=1; //David's contact file
---
>   else if(extension=="dat") *q=2; //David's contact file
289c285
<     if(linecount%10000==0) std::cout << linecount << std::endl;
---
>     if(linecount%10000==0) std::cout << linecount << std::endl; 
292,294c288
<       if(q1 == 1){ 
<         msa_freq(i,0) += 1.0;
<       }
---
>       msa_freq(i,q1) += 1.0;
301,303c295
<         if (q1==1&&q2==1){
<           msa_corr(0,0,l) += 1.0;
<         }
---
>         msa_corr(q1,q2,l) += 1.0;
308a301,306
>   // code to test how many counts are actually being produced
>   for(int i = 0; i<N;i++){
>     float value = msa_freq(i,1);
>     std::cout << value << std::endl;
>   }
>   std::cout << linecount << std::endl;
diff -r Ising-Model/src/run_dca.cpp Boltzmann-Machine_test/src/run_dca.cpp
106c106
<   arma::mat msa_freq(model.N,model.q,arma::fill::zeros);
---
>   arma::mat msa_freq(model.N,model.q,arma::fill::ones);
107a108
>   msa_freq = msa_freq/21.0;
173a175,195
>   /***TEST FOR SW TOY MODEL---MOVE TO A TEST FILE***/
> 
> /*
>   msa_freq(0,0)=0.5;
>   msa_freq(0,1)=0.5;
>   msa_freq(1,0)=0.5;
>   msa_freq(0,1)=0.5;
>   msa_corr(0,0,0)=0.440399;
>   msa_corr(0,1,0)=0.059601;
>   msa_corr(1,0,0)=0.059601;
>   msa_corr(1,1,0)=0.440399;
> */
>   //model.convert_to_zero_sum();
> 
>   if(model.N==2){
>     std::cout << "h:" << std::endl;
>     std::cout << model.h << std::endl;
>     std::cout << "J:" << std::endl;
>     std::cout << model.J << std::endl;
>   }
> 
176a199,218
> 
>   if(model.N==2){
>     std::cout << "h:" << std::endl;
>     std::cout << model.h << std::endl;
>     std::cout << "J:" << std::endl;
>     std::cout << model.J << std::endl;
>   }
> 
>   //Ensure parameters are in zero-sum gauge
>   /*
>   model.convert_to_zero_sum();
> 
>   if(model.N==2){
>     std::cout << "After zero-sum conversion:" << std::endl;
>     std::cout << "h:" << std::endl;
>     std::cout << model.h << std::endl;
>     std::cout << "J:" << std::endl;
>     std::cout << model.J << std::endl;
>   }
>   */
